name: Import Snapshot

description: 'Imports a snapshot of all settings and configurations into a Descope project.'

author: 'Descope'

branding:
  icon: 'database'
  color: 'green'

inputs:
  project_id:
    description: 'The id of the Descope project to import into'
    required: true
  management_key:
    description: 'The management key for the Descope project'
    required: true
  secrets:
    description: 'An optional JSON value with additional secrets to inject into the import data'
    default: '[]'
  files_path:
    description: 'The path to the snapshot files (i.e., the directory containing the snapshot.json file)'
    default: '.'
  validate_only:
    description: 'Whether to only perform the validate step (for building workflows where validate is a separate job)'
    type: boolean
  import_only:
    description: 'Whether to only perform the import step (for building workflows where import is a separate job)'
    type: boolean
  descopecli_version:
    description: 'The version of the descopecli tool to use'
    default: 'latest'
  descope_base_url:
    description: 'The base URL used to communicate with Descope servers (for troubleshooting purposes)'

outputs:
  failure_file:
    description: 'The path to a file with a list of failures, or empty if there were none'
    value: ${{ steps.validate.outputs.failure_file }}
  missing_secrets_file:
    description: 'The path to a JSON array with any missing secrets, or empty if there were none'
    value: ${{ steps.validate.outputs.missing_secrets_file }}

runs:
  using: 'composite'
  steps:
    - name: Install Descope CLI
      uses: descope/descopecli/.github/actions/install@main
      with:
        version: ${{ inputs.descopecli_version }}

    - name: Check State
      shell: bash
      run: |
        echo "Checking action state"
        if [ -z "${{ inputs.project_id }}" ]; then
          echo "The project_id input is required for this action to run"
          exit 1
        fi
        MANAGEMENT_KEY="$(jq -r '.inputs.management_key' $GITHUB_EVENT_PATH)"
        echo ::add-mask::$MANAGEMENT_KEY
        if [ -z "$MANAGEMENT_KEY" ]; then
          echo "The management_key input is required for this action to run"
          exit 1
        fi
        if [ -z "${{ inputs.files_path }}" ]; then
          echo "The files_path input cannot be an empty string"
          exit 1
        fi
        if ! [ -d "${{ inputs.files_path }}" ]; then
          echo "The files_path input '${{ inputs.files_path }}' doesn't exist, make sure the checkout action was called"
          exit 1
        fi

    - name: Validate Snapshot
      if: ${{ !inputs.import_only }}
      id: validate
      shell: bash
      env:
        DESCOPE_MANAGEMENT_KEY: ${{ inputs.management_key }}
        DESCOPE_BASE_URL: ${{ inputs.descope_base_url }}
      run: |
        echo "Validating snapshot"
        set +e
        SECRETS_INPUT="$(mktemp)"
        SECRETS_OUTPUT="$(mktemp)"
        FAILURE_OUTPUT="$(mktemp)"
        jq -r '.inputs.secrets' $GITHUB_EVENT_PATH > "$SECRETS_INPUT"
        descopecli project snapshot validate "${{ inputs.project_id }}" --path "${{ inputs.files_path }}" --secrets-input "$SECRETS_INPUT" --secrets-output "$SECRETS_OUTPUT" --failure-output "$FAILURE_OUTPUT"
        result=$?
        rm "$SECRETS_INPUT"
        if [ "$result" = "2" ]; then
          if [ -f "$SECRETS_OUTPUT" ] && [ -s "$SECRETS_OUTPUT" ]; then
            echo missing_secrets_file="$SECRETS_OUTPUT" >> $GITHUB_OUTPUT
          fi
          if [ -f "$FAILURE_OUTPUT" ] && [ -s "$FAILURE_OUTPUT" ]; then
            echo failure_file="$FAILURE_OUTPUT" >> $GITHUB_OUTPUT
          fi
        fi
        exit $result

    - name: Import Snapshot
      if: ${{ !inputs.validate_only }}
      shell: bash
      env:
        DESCOPE_MANAGEMENT_KEY: ${{ inputs.management_key }}
        DESCOPE_BASE_URL: ${{ inputs.descope_base_url }}
      run: |
        echo "Importing snapshot"
        set +e
        SECRETS_INPUT="$(mktemp)"
        jq -r '.inputs.secrets' $GITHUB_EVENT_PATH > "$SECRETS_INPUT"
        descopecli project snapshot import "${{ inputs.project_id }}" --path "${{ inputs.files_path }}" --secrets-input "$SECRETS_INPUT"
        result=$?
        rm "$SECRETS_INPUT"
        exit $result
